// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ReactMessagesExample /> should render itself 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ReactMessagesExample />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <h3>
          Options:
</h3>,
        <ul
          className="app-list"
>
          <li
                    className="app-list-item"
          >
                    <label
                              className="txt"
                              htmlFor="icon"
                    >
                              Choose the icon:
                              <br />
                              <select
                                        className="app-select"
                                        onChange={[Function]}
                              >
                                        <option
                                                  default={true}
                                                  value="heart"
                                        >
                                                  Heart
                                        </option>
                                        <option
                                                  value="warning"
                                        >
                                                  Warning
                                        </option>
                                        <option
                                                  value="info"
                                        >
                                                  Info
                                        </option>
                                        <option
                                                  value="thumbs-up"
                                        >
                                                  Thumbs up
                                        </option>
                                        <option
                                                  value="thumbs-down"
                                        >
                                                  Thumbs down
                                        </option>
                              </select>
                    </label>
          </li>
          <li
                    className="app-list-item"
          >
                    <label
                              className="txt"
                              htmlFor="duration"
                    >
                              Choose the duration:
                              <br />
                              <input
                                        className="app-range"
                                        max="10"
                                        min="1"
                                        onChange={[Function]}
                                        step="1"
                                        type="range"
                                        value={1}
                              />
                              <span>
                                        1
                                         second/s
                              </span>
                    </label>
          </li>
          <li
                    className="app-list-item"
          >
                    <label
                              className="txt"
                              htmlFor="error"
                    >
                              Choose if the message is an error:
                              <br />
                              <input
                                        checked={false}
                                        id="isError"
                                        name="error"
                                        onChange={[Function]}
                                        type="radio"
                                        value={true}
                              />
                               Is an error Â 
                              <input
                                        checked={true}
                                        id="isNotError"
                                        name="error"
                                        onChange={[Function]}
                                        type="radio"
                                        value={false}
                              />
                               Is not an error
                    </label>
          </li>
          <li>
                    <label
                              className="txt"
                              htmlFor="text"
                    >
                              Fill the input and press the button to render a new message
                              <br />
                              <input
                                        className="app-form-input-with-button"
                                        onChange={[Function]}
                                        type="text"
                                        value=""
                              />
                              <button
                                        className="btn app-form-input-button"
                                        onClick={[Function]}
                              >
                                        Show
                              </button>
                    </label>
          </li>
</ul>,
        <M
          duration={1000}
          error={false}
          icon="heart"
          message="Just an initial message"
          next={false}
/>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Options:",
        },
        "ref": null,
        "rendered": "Options:",
        "type": "h3",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <li
              className="app-list-item"
>
              <label
                            className="txt"
                            htmlFor="icon"
              >
                            Choose the icon:
                            <br />
                            <select
                                          className="app-select"
                                          onChange={[Function]}
                            >
                                          <option
                                                        default={true}
                                                        value="heart"
                                          >
                                                        Heart
                                          </option>
                                          <option
                                                        value="warning"
                                          >
                                                        Warning
                                          </option>
                                          <option
                                                        value="info"
                                          >
                                                        Info
                                          </option>
                                          <option
                                                        value="thumbs-up"
                                          >
                                                        Thumbs up
                                          </option>
                                          <option
                                                        value="thumbs-down"
                                          >
                                                        Thumbs down
                                          </option>
                            </select>
              </label>
</li>,
            <li
              className="app-list-item"
>
              <label
                            className="txt"
                            htmlFor="duration"
              >
                            Choose the duration:
                            <br />
                            <input
                                          className="app-range"
                                          max="10"
                                          min="1"
                                          onChange={[Function]}
                                          step="1"
                                          type="range"
                                          value={1}
                            />
                            <span>
                                          1
                                           second/s
                            </span>
              </label>
</li>,
            <li
              className="app-list-item"
>
              <label
                            className="txt"
                            htmlFor="error"
              >
                            Choose if the message is an error:
                            <br />
                            <input
                                          checked={false}
                                          id="isError"
                                          name="error"
                                          onChange={[Function]}
                                          type="radio"
                                          value={true}
                            />
                             Is an error Â 
                            <input
                                          checked={true}
                                          id="isNotError"
                                          name="error"
                                          onChange={[Function]}
                                          type="radio"
                                          value={false}
                            />
                             Is not an error
              </label>
</li>,
            <li>
              <label
                            className="txt"
                            htmlFor="text"
              >
                            Fill the input and press the button to render a new message
                            <br />
                            <input
                                          className="app-form-input-with-button"
                                          onChange={[Function]}
                                          type="text"
                                          value=""
                            />
                            <button
                                          className="btn app-form-input-button"
                                          onClick={[Function]}
                            >
                                          Show
                            </button>
              </label>
</li>,
          ],
          "className": "app-list",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <label
                className="txt"
                htmlFor="icon"
>
                Choose the icon:
                <br />
                <select
                                className="app-select"
                                onChange={[Function]}
                >
                                <option
                                                default={true}
                                                value="heart"
                                >
                                                Heart
                                </option>
                                <option
                                                value="warning"
                                >
                                                Warning
                                </option>
                                <option
                                                value="info"
                                >
                                                Info
                                </option>
                                <option
                                                value="thumbs-up"
                                >
                                                Thumbs up
                                </option>
                                <option
                                                value="thumbs-down"
                                >
                                                Thumbs down
                                </option>
                </select>
</label>,
              "className": "app-list-item",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  "Choose the icon:",
                  <br />,
                  <select
                    className="app-select"
                    onChange={[Function]}
>
                    <option
                                        default={true}
                                        value="heart"
                    >
                                        Heart
                    </option>
                    <option
                                        value="warning"
                    >
                                        Warning
                    </option>
                    <option
                                        value="info"
                    >
                                        Info
                    </option>
                    <option
                                        value="thumbs-up"
                    >
                                        Thumbs up
                    </option>
                    <option
                                        value="thumbs-down"
                    >
                                        Thumbs down
                    </option>
</select>,
                ],
                "className": "txt",
                "htmlFor": "icon",
              },
              "ref": null,
              "rendered": Array [
                "Choose the icon:",
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": "br",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <option
                        default={true}
                        value="heart"
>
                        Heart
</option>,
                      <option
                        value="warning"
>
                        Warning
</option>,
                      <option
                        value="info"
>
                        Info
</option>,
                      <option
                        value="thumbs-up"
>
                        Thumbs up
</option>,
                      <option
                        value="thumbs-down"
>
                        Thumbs down
</option>,
                    ],
                    "className": "app-select",
                    "onChange": [Function],
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "Heart",
                        "default": true,
                        "value": "heart",
                      },
                      "ref": null,
                      "rendered": "Heart",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "Warning",
                        "value": "warning",
                      },
                      "ref": null,
                      "rendered": "Warning",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "Info",
                        "value": "info",
                      },
                      "ref": null,
                      "rendered": "Info",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "Thumbs up",
                        "value": "thumbs-up",
                      },
                      "ref": null,
                      "rendered": "Thumbs up",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "Thumbs down",
                        "value": "thumbs-down",
                      },
                      "ref": null,
                      "rendered": "Thumbs down",
                      "type": "option",
                    },
                  ],
                  "type": "select",
                },
              ],
              "type": "label",
            },
            "type": "li",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <label
                className="txt"
                htmlFor="duration"
>
                Choose the duration:
                <br />
                <input
                                className="app-range"
                                max="10"
                                min="1"
                                onChange={[Function]}
                                step="1"
                                type="range"
                                value={1}
                />
                <span>
                                1
                                 second/s
                </span>
</label>,
              "className": "app-list-item",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  "Choose the duration:",
                  <br />,
                  <input
                    className="app-range"
                    max="10"
                    min="1"
                    onChange={[Function]}
                    step="1"
                    type="range"
                    value={1}
/>,
                  <span>
                    1
                     second/s
</span>,
                ],
                "className": "txt",
                "htmlFor": "duration",
              },
              "ref": null,
              "rendered": Array [
                "Choose the duration:",
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": "br",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "className": "app-range",
                    "max": "10",
                    "min": "1",
                    "onChange": [Function],
                    "step": "1",
                    "type": "range",
                    "value": 1,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "input",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      1,
                      " second/s",
                    ],
                  },
                  "ref": null,
                  "rendered": Array [
                    1,
                    " second/s",
                  ],
                  "type": "span",
                },
              ],
              "type": "label",
            },
            "type": "li",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <label
                className="txt"
                htmlFor="error"
>
                Choose if the message is an error:
                <br />
                <input
                                checked={false}
                                id="isError"
                                name="error"
                                onChange={[Function]}
                                type="radio"
                                value={true}
                />
                 Is an error Â 
                <input
                                checked={true}
                                id="isNotError"
                                name="error"
                                onChange={[Function]}
                                type="radio"
                                value={false}
                />
                 Is not an error
</label>,
              "className": "app-list-item",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  "Choose if the message is an error:",
                  <br />,
                  <input
                    checked={false}
                    id="isError"
                    name="error"
                    onChange={[Function]}
                    type="radio"
                    value={true}
/>,
                  " Is an error Â ",
                  <input
                    checked={true}
                    id="isNotError"
                    name="error"
                    onChange={[Function]}
                    type="radio"
                    value={false}
/>,
                  " Is not an error",
                ],
                "className": "txt",
                "htmlFor": "error",
              },
              "ref": null,
              "rendered": Array [
                "Choose if the message is an error:",
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": "br",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "checked": false,
                    "id": "isError",
                    "name": "error",
                    "onChange": [Function],
                    "type": "radio",
                    "value": true,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "input",
                },
                " Is an error Â ",
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "checked": true,
                    "id": "isNotError",
                    "name": "error",
                    "onChange": [Function],
                    "type": "radio",
                    "value": false,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "input",
                },
                " Is not an error",
              ],
              "type": "label",
            },
            "type": "li",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <label
                className="txt"
                htmlFor="text"
>
                Fill the input and press the button to render a new message
                <br />
                <input
                                className="app-form-input-with-button"
                                onChange={[Function]}
                                type="text"
                                value=""
                />
                <button
                                className="btn app-form-input-button"
                                onClick={[Function]}
                >
                                Show
                </button>
</label>,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  "Fill the input and press the button to render a new message",
                  <br />,
                  <input
                    className="app-form-input-with-button"
                    onChange={[Function]}
                    type="text"
                    value=""
/>,
                  <button
                    className="btn app-form-input-button"
                    onClick={[Function]}
>
                    Show
</button>,
                ],
                "className": "txt",
                "htmlFor": "text",
              },
              "ref": null,
              "rendered": Array [
                "Fill the input and press the button to render a new message",
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": "br",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "className": "app-form-input-with-button",
                    "onChange": [Function],
                    "type": "text",
                    "value": "",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "input",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Show",
                    "className": "btn app-form-input-button",
                    "onClick": [Function],
                  },
                  "ref": null,
                  "rendered": "Show",
                  "type": "button",
                },
              ],
              "type": "label",
            },
            "type": "li",
          },
        ],
        "type": "ul",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "duration": 1000,
          "error": false,
          "icon": "heart",
          "message": "Just an initial message",
          "next": false,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": "article",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h3>
            Options:
</h3>,
          <ul
            className="app-list"
>
            <li
                        className="app-list-item"
            >
                        <label
                                    className="txt"
                                    htmlFor="icon"
                        >
                                    Choose the icon:
                                    <br />
                                    <select
                                                className="app-select"
                                                onChange={[Function]}
                                    >
                                                <option
                                                            default={true}
                                                            value="heart"
                                                >
                                                            Heart
                                                </option>
                                                <option
                                                            value="warning"
                                                >
                                                            Warning
                                                </option>
                                                <option
                                                            value="info"
                                                >
                                                            Info
                                                </option>
                                                <option
                                                            value="thumbs-up"
                                                >
                                                            Thumbs up
                                                </option>
                                                <option
                                                            value="thumbs-down"
                                                >
                                                            Thumbs down
                                                </option>
                                    </select>
                        </label>
            </li>
            <li
                        className="app-list-item"
            >
                        <label
                                    className="txt"
                                    htmlFor="duration"
                        >
                                    Choose the duration:
                                    <br />
                                    <input
                                                className="app-range"
                                                max="10"
                                                min="1"
                                                onChange={[Function]}
                                                step="1"
                                                type="range"
                                                value={1}
                                    />
                                    <span>
                                                1
                                                 second/s
                                    </span>
                        </label>
            </li>
            <li
                        className="app-list-item"
            >
                        <label
                                    className="txt"
                                    htmlFor="error"
                        >
                                    Choose if the message is an error:
                                    <br />
                                    <input
                                                checked={false}
                                                id="isError"
                                                name="error"
                                                onChange={[Function]}
                                                type="radio"
                                                value={true}
                                    />
                                     Is an error Â 
                                    <input
                                                checked={true}
                                                id="isNotError"
                                                name="error"
                                                onChange={[Function]}
                                                type="radio"
                                                value={false}
                                    />
                                     Is not an error
                        </label>
            </li>
            <li>
                        <label
                                    className="txt"
                                    htmlFor="text"
                        >
                                    Fill the input and press the button to render a new message
                                    <br />
                                    <input
                                                className="app-form-input-with-button"
                                                onChange={[Function]}
                                                type="text"
                                                value=""
                                    />
                                    <button
                                                className="btn app-form-input-button"
                                                onClick={[Function]}
                                    >
                                                Show
                                    </button>
                        </label>
            </li>
</ul>,
          <M
            duration={1000}
            error={false}
            icon="heart"
            message="Just an initial message"
            next={false}
/>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Options:",
          },
          "ref": null,
          "rendered": "Options:",
          "type": "h3",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <li
                className="app-list-item"
>
                <label
                                className="txt"
                                htmlFor="icon"
                >
                                Choose the icon:
                                <br />
                                <select
                                                className="app-select"
                                                onChange={[Function]}
                                >
                                                <option
                                                                default={true}
                                                                value="heart"
                                                >
                                                                Heart
                                                </option>
                                                <option
                                                                value="warning"
                                                >
                                                                Warning
                                                </option>
                                                <option
                                                                value="info"
                                                >
                                                                Info
                                                </option>
                                                <option
                                                                value="thumbs-up"
                                                >
                                                                Thumbs up
                                                </option>
                                                <option
                                                                value="thumbs-down"
                                                >
                                                                Thumbs down
                                                </option>
                                </select>
                </label>
</li>,
              <li
                className="app-list-item"
>
                <label
                                className="txt"
                                htmlFor="duration"
                >
                                Choose the duration:
                                <br />
                                <input
                                                className="app-range"
                                                max="10"
                                                min="1"
                                                onChange={[Function]}
                                                step="1"
                                                type="range"
                                                value={1}
                                />
                                <span>
                                                1
                                                 second/s
                                </span>
                </label>
</li>,
              <li
                className="app-list-item"
>
                <label
                                className="txt"
                                htmlFor="error"
                >
                                Choose if the message is an error:
                                <br />
                                <input
                                                checked={false}
                                                id="isError"
                                                name="error"
                                                onChange={[Function]}
                                                type="radio"
                                                value={true}
                                />
                                 Is an error Â 
                                <input
                                                checked={true}
                                                id="isNotError"
                                                name="error"
                                                onChange={[Function]}
                                                type="radio"
                                                value={false}
                                />
                                 Is not an error
                </label>
</li>,
              <li>
                <label
                                className="txt"
                                htmlFor="text"
                >
                                Fill the input and press the button to render a new message
                                <br />
                                <input
                                                className="app-form-input-with-button"
                                                onChange={[Function]}
                                                type="text"
                                                value=""
                                />
                                <button
                                                className="btn app-form-input-button"
                                                onClick={[Function]}
                                >
                                                Show
                                </button>
                </label>
</li>,
            ],
            "className": "app-list",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <label
                  className="txt"
                  htmlFor="icon"
>
                  Choose the icon:
                  <br />
                  <select
                                    className="app-select"
                                    onChange={[Function]}
                  >
                                    <option
                                                      default={true}
                                                      value="heart"
                                    >
                                                      Heart
                                    </option>
                                    <option
                                                      value="warning"
                                    >
                                                      Warning
                                    </option>
                                    <option
                                                      value="info"
                                    >
                                                      Info
                                    </option>
                                    <option
                                                      value="thumbs-up"
                                    >
                                                      Thumbs up
                                    </option>
                                    <option
                                                      value="thumbs-down"
                                    >
                                                      Thumbs down
                                    </option>
                  </select>
</label>,
                "className": "app-list-item",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    "Choose the icon:",
                    <br />,
                    <select
                      className="app-select"
                      onChange={[Function]}
>
                      <option
                                            default={true}
                                            value="heart"
                      >
                                            Heart
                      </option>
                      <option
                                            value="warning"
                      >
                                            Warning
                      </option>
                      <option
                                            value="info"
                      >
                                            Info
                      </option>
                      <option
                                            value="thumbs-up"
                      >
                                            Thumbs up
                      </option>
                      <option
                                            value="thumbs-down"
                      >
                                            Thumbs down
                      </option>
</select>,
                  ],
                  "className": "txt",
                  "htmlFor": "icon",
                },
                "ref": null,
                "rendered": Array [
                  "Choose the icon:",
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {},
                    "ref": null,
                    "rendered": null,
                    "type": "br",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        <option
                          default={true}
                          value="heart"
>
                          Heart
</option>,
                        <option
                          value="warning"
>
                          Warning
</option>,
                        <option
                          value="info"
>
                          Info
</option>,
                        <option
                          value="thumbs-up"
>
                          Thumbs up
</option>,
                        <option
                          value="thumbs-down"
>
                          Thumbs down
</option>,
                      ],
                      "className": "app-select",
                      "onChange": [Function],
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "Heart",
                          "default": true,
                          "value": "heart",
                        },
                        "ref": null,
                        "rendered": "Heart",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "Warning",
                          "value": "warning",
                        },
                        "ref": null,
                        "rendered": "Warning",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "Info",
                          "value": "info",
                        },
                        "ref": null,
                        "rendered": "Info",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "Thumbs up",
                          "value": "thumbs-up",
                        },
                        "ref": null,
                        "rendered": "Thumbs up",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "Thumbs down",
                          "value": "thumbs-down",
                        },
                        "ref": null,
                        "rendered": "Thumbs down",
                        "type": "option",
                      },
                    ],
                    "type": "select",
                  },
                ],
                "type": "label",
              },
              "type": "li",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <label
                  className="txt"
                  htmlFor="duration"
>
                  Choose the duration:
                  <br />
                  <input
                                    className="app-range"
                                    max="10"
                                    min="1"
                                    onChange={[Function]}
                                    step="1"
                                    type="range"
                                    value={1}
                  />
                  <span>
                                    1
                                     second/s
                  </span>
</label>,
                "className": "app-list-item",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    "Choose the duration:",
                    <br />,
                    <input
                      className="app-range"
                      max="10"
                      min="1"
                      onChange={[Function]}
                      step="1"
                      type="range"
                      value={1}
/>,
                    <span>
                      1
                       second/s
</span>,
                  ],
                  "className": "txt",
                  "htmlFor": "duration",
                },
                "ref": null,
                "rendered": Array [
                  "Choose the duration:",
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {},
                    "ref": null,
                    "rendered": null,
                    "type": "br",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "className": "app-range",
                      "max": "10",
                      "min": "1",
                      "onChange": [Function],
                      "step": "1",
                      "type": "range",
                      "value": 1,
                    },
                    "ref": null,
                    "rendered": null,
                    "type": "input",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        1,
                        " second/s",
                      ],
                    },
                    "ref": null,
                    "rendered": Array [
                      1,
                      " second/s",
                    ],
                    "type": "span",
                  },
                ],
                "type": "label",
              },
              "type": "li",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <label
                  className="txt"
                  htmlFor="error"
>
                  Choose if the message is an error:
                  <br />
                  <input
                                    checked={false}
                                    id="isError"
                                    name="error"
                                    onChange={[Function]}
                                    type="radio"
                                    value={true}
                  />
                   Is an error Â 
                  <input
                                    checked={true}
                                    id="isNotError"
                                    name="error"
                                    onChange={[Function]}
                                    type="radio"
                                    value={false}
                  />
                   Is not an error
</label>,
                "className": "app-list-item",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    "Choose if the message is an error:",
                    <br />,
                    <input
                      checked={false}
                      id="isError"
                      name="error"
                      onChange={[Function]}
                      type="radio"
                      value={true}
/>,
                    " Is an error Â ",
                    <input
                      checked={true}
                      id="isNotError"
                      name="error"
                      onChange={[Function]}
                      type="radio"
                      value={false}
/>,
                    " Is not an error",
                  ],
                  "className": "txt",
                  "htmlFor": "error",
                },
                "ref": null,
                "rendered": Array [
                  "Choose if the message is an error:",
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {},
                    "ref": null,
                    "rendered": null,
                    "type": "br",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "checked": false,
                      "id": "isError",
                      "name": "error",
                      "onChange": [Function],
                      "type": "radio",
                      "value": true,
                    },
                    "ref": null,
                    "rendered": null,
                    "type": "input",
                  },
                  " Is an error Â ",
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "checked": true,
                      "id": "isNotError",
                      "name": "error",
                      "onChange": [Function],
                      "type": "radio",
                      "value": false,
                    },
                    "ref": null,
                    "rendered": null,
                    "type": "input",
                  },
                  " Is not an error",
                ],
                "type": "label",
              },
              "type": "li",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <label
                  className="txt"
                  htmlFor="text"
>
                  Fill the input and press the button to render a new message
                  <br />
                  <input
                                    className="app-form-input-with-button"
                                    onChange={[Function]}
                                    type="text"
                                    value=""
                  />
                  <button
                                    className="btn app-form-input-button"
                                    onClick={[Function]}
                  >
                                    Show
                  </button>
</label>,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    "Fill the input and press the button to render a new message",
                    <br />,
                    <input
                      className="app-form-input-with-button"
                      onChange={[Function]}
                      type="text"
                      value=""
/>,
                    <button
                      className="btn app-form-input-button"
                      onClick={[Function]}
>
                      Show
</button>,
                  ],
                  "className": "txt",
                  "htmlFor": "text",
                },
                "ref": null,
                "rendered": Array [
                  "Fill the input and press the button to render a new message",
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {},
                    "ref": null,
                    "rendered": null,
                    "type": "br",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "className": "app-form-input-with-button",
                      "onChange": [Function],
                      "type": "text",
                      "value": "",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": "input",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Show",
                      "className": "btn app-form-input-button",
                      "onClick": [Function],
                    },
                    "ref": null,
                    "rendered": "Show",
                    "type": "button",
                  },
                ],
                "type": "label",
              },
              "type": "li",
            },
          ],
          "type": "ul",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "duration": 1000,
            "error": false,
            "icon": "heart",
            "message": "Just an initial message",
            "next": false,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "article",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
